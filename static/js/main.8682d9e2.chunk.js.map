{"version":3,"sources":["component/Recipe/Recipe.module.css","component/Recipe/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","title","calories","image","className","styles","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","console","log","hits","onSubmit","event","preventDefault","type","value","onChange","target","map","Recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCY3CC,EAVA,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,MAC9B,OACI,yBAAKC,UAAWC,IAAOL,QACnB,4BAAKC,GACL,2BAAIC,GACJ,yBAAKE,UAAWC,IAAOF,MAAMG,IAAKH,EAAOI,IAAI,OCgD1CC,G,MApDH,WACV,IADgB,EAIaC,mBAAS,IAJtB,mBAIVC,EAJU,KAIDC,EAJC,OAKWF,mBAAS,IALpB,mBAKVG,EALU,KAKFC,EALE,OAMSJ,mBAAS,WANlB,mBAMVK,EANU,KAMHC,EANG,KAQhBC,qBAAW,WACTC,MACA,CAACH,IAEH,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUE,cACVM,EADU,gBAEIA,EAASC,OAFb,OAEVC,EAFU,OAGhBC,QAAQC,IAAIF,EAAKG,MACjBd,EAAWW,EAAKG,MAJA,2CAAH,qDAiBf,OACE,yBAAKrB,UAAU,OACb,0BAAMsB,SAPQ,SAACC,GACjBA,EAAMC,iBACNb,EAASH,GACTC,EAAU,KAIqBT,UAAU,cACrC,2BAAOyB,KAAK,OAAOzB,UAAU,cAAc0B,MAAQlB,EAAQmB,SAbrC,SAACJ,GAC3Bd,EAAUc,EAAMK,OAAOF,UAanB,4BAAQD,KAAK,SAASzB,UAAU,aAAhC,WAKF,yBAAKA,UAAU,UACdM,EAAQuB,KAAI,SAAAjC,GAAM,OACjB,kBAACkC,EAAD,CAAQC,IAAOnC,EAAOA,OAAOoC,MAC7BnC,MAASD,EAAOA,OAAOoC,MACvBlC,SAAYF,EAAOA,OAAOE,SAC1BC,MAASH,EAAOA,OAAOG,eCnCXkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.8682d9e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__1OkXT\",\"image\":\"Recipe_image__19Y3D\"};","import React from 'react';\r\nimport styles from './Recipe.module.css';\r\n\r\nconst recipe = ({title, calories, image}) =>{\r\n    return(\r\n        <div className={styles.recipe}>\r\n            <h3>{title}</h3>\r\n            <p>{calories}</p>\r\n            <img className={styles.image}src={image} alt=\"\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './component/Recipe/Recipe';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = \"6623d026\";\n  const APP_KEY = \"de4d0da7af849a5076cacfd58343b71b\";\n\n  const[recipes, setRecipes] = useState([]);\n  const[search, setSearch] = useState('');\n  const[query, setQuery] = useState('chicken')\n\n  useEffect( () => {\n    getRecipe();\n  },[query]);\n\n  const getRecipe = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data =  await response.json();\n    console.log(data.hits);\n    setRecipes(data.hits);\n  }\n\n  const updateSearchHandler = (event) => {\n    setSearch(event.target.value);\n    // console.log(search);\n  }\n\n  const getSearch = (event) => {\n    event.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n  return(\n    <div className=\"App\">\n      <form onSubmit = {getSearch} className=\"searchForm\">\n        <input type=\"text\" className=\"searchInput\" value= {search} onChange = {updateSearchHandler}/>\n        <button type=\"submit\" className=\"searchBtn\">\n          Search\n        </button>\n      </form>\n      {/* <h1 onClick = { () =>setCounter(counter + 1) }> {counter}</h1> */}\n      <div className=\"Recipe\">\n      {recipes.map(recipe => (\n        <Recipe key = {recipe.recipe.label}\n        title = {recipe.recipe.label} \n        calories = {recipe.recipe.calories} \n        image = {recipe.recipe.image}/>\n      ))}\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}